/*
 * Dmp.Hydro.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dk.miljoeportal.vandah.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import dk.miljoeportal.vandah.model.DmpHydroApiRequestsResultRequest;
import dk.miljoeportal.vandah.model.DmpHydroApiRequestsStationIdentifier;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * DmpHydroApiRequestsUpdateMeasurementsRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-18T14:15:50.310248991+02:00[Europe/Copenhagen]")

public class DmpHydroApiRequestsUpdateMeasurementsRequest {
  @JsonProperty("station")
  private DmpHydroApiRequestsStationIdentifier station = null;

  @JsonProperty("measurementPointNumber")
  private Integer measurementPointNumber = null;

  @JsonProperty("examinationTypeSc")
  private Integer examinationTypeSc = null;

  @JsonProperty("transactionBased")
  private Boolean transactionBased = null;

  @JsonProperty("results")
  private List<DmpHydroApiRequestsResultRequest> results = new ArrayList<DmpHydroApiRequestsResultRequest>();

  public DmpHydroApiRequestsUpdateMeasurementsRequest station(DmpHydroApiRequestsStationIdentifier station) {
    this.station = station;
    return this;
  }

   /**
   * Get station
   * @return station
  **/
  @Schema(required = true, description = "")
  public DmpHydroApiRequestsStationIdentifier getStation() {
    return station;
  }

  public void setStation(DmpHydroApiRequestsStationIdentifier station) {
    this.station = station;
  }

  public DmpHydroApiRequestsUpdateMeasurementsRequest measurementPointNumber(Integer measurementPointNumber) {
    this.measurementPointNumber = measurementPointNumber;
    return this;
  }

   /**
   * Measurement point number in the station
   * @return measurementPointNumber
  **/
  @Schema(required = true, description = "Measurement point number in the station")
  public Integer getMeasurementPointNumber() {
    return measurementPointNumber;
  }

  public void setMeasurementPointNumber(Integer measurementPointNumber) {
    this.measurementPointNumber = measurementPointNumber;
  }

  public DmpHydroApiRequestsUpdateMeasurementsRequest examinationTypeSc(Integer examinationTypeSc) {
    this.examinationTypeSc = examinationTypeSc;
    return this;
  }

   /**
   * Examination type stancode, a subset of stancode 1101
   * @return examinationTypeSc
  **/
  @Schema(required = true, description = "Examination type stancode, a subset of stancode 1101")
  public Integer getExaminationTypeSc() {
    return examinationTypeSc;
  }

  public void setExaminationTypeSc(Integer examinationTypeSc) {
    this.examinationTypeSc = examinationTypeSc;
  }

  public DmpHydroApiRequestsUpdateMeasurementsRequest transactionBased(Boolean transactionBased) {
    this.transactionBased = transactionBased;
    return this;
  }

   /**
   * True: The batch is treated as a transaction. If one or more fails, no data is persisted in the database. False: Measurements are treated individually. Some might fail while others are persisted in the database.
   * @return transactionBased
  **/
  @Schema(description = "True: The batch is treated as a transaction. If one or more fails, no data is persisted in the database. False: Measurements are treated individually. Some might fail while others are persisted in the database.")
  public Boolean isTransactionBased() {
    return transactionBased;
  }

  public void setTransactionBased(Boolean transactionBased) {
    this.transactionBased = transactionBased;
  }

  public DmpHydroApiRequestsUpdateMeasurementsRequest results(List<DmpHydroApiRequestsResultRequest> results) {
    this.results = results;
    return this;
  }

  public DmpHydroApiRequestsUpdateMeasurementsRequest addResultsItem(DmpHydroApiRequestsResultRequest resultsItem) {
    this.results.add(resultsItem);
    return this;
  }

   /**
   * Get results
   * @return results
  **/
  @Schema(required = true, description = "")
  public List<DmpHydroApiRequestsResultRequest> getResults() {
    return results;
  }

  public void setResults(List<DmpHydroApiRequestsResultRequest> results) {
    this.results = results;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DmpHydroApiRequestsUpdateMeasurementsRequest dmpHydroApiRequestsUpdateMeasurementsRequest = (DmpHydroApiRequestsUpdateMeasurementsRequest) o;
    return Objects.equals(this.station, dmpHydroApiRequestsUpdateMeasurementsRequest.station) &&
        Objects.equals(this.measurementPointNumber, dmpHydroApiRequestsUpdateMeasurementsRequest.measurementPointNumber) &&
        Objects.equals(this.examinationTypeSc, dmpHydroApiRequestsUpdateMeasurementsRequest.examinationTypeSc) &&
        Objects.equals(this.transactionBased, dmpHydroApiRequestsUpdateMeasurementsRequest.transactionBased) &&
        Objects.equals(this.results, dmpHydroApiRequestsUpdateMeasurementsRequest.results);
  }

  @Override
  public int hashCode() {
    return Objects.hash(station, measurementPointNumber, examinationTypeSc, transactionBased, results);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DmpHydroApiRequestsUpdateMeasurementsRequest {\n");
    
    sb.append("    station: ").append(toIndentedString(station)).append("\n");
    sb.append("    measurementPointNumber: ").append(toIndentedString(measurementPointNumber)).append("\n");
    sb.append("    examinationTypeSc: ").append(toIndentedString(examinationTypeSc)).append("\n");
    sb.append("    transactionBased: ").append(toIndentedString(transactionBased)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
