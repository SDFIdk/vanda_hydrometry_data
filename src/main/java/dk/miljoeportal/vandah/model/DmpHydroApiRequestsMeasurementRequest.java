/*
 * Dmp.Hydro.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dk.miljoeportal.vandah.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Date;
import java.time.OffsetDateTime;
/**
 * DmpHydroApiRequestsMeasurementRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-27T10:11:34.799092956+02:00[Europe/Copenhagen]")

public class DmpHydroApiRequestsMeasurementRequest {
  @JsonProperty("formulaId")
  private String formulaId = null;

  @JsonProperty("measurementDateTime")
  private OffsetDateTime measurementDateTime = null;

  @JsonProperty("result")
  private Double result = null;

  @JsonProperty("reasonCodeSc")
  private Integer reasonCodeSc = null;

  @JsonProperty("refPointText")
  private String refPointText = null;

  @JsonProperty("distToFixPointM")
  private Double distToFixPointM = null;

  public DmpHydroApiRequestsMeasurementRequest formulaId(String formulaId) {
    this.formulaId = formulaId;
    return this;
  }

   /**
   * Formula id
   * @return formulaId
  **/
  @Schema(description = "Formula id")
  public String getFormulaId() {
    return formulaId;
  }

  public void setFormulaId(String formulaId) {
    this.formulaId = formulaId;
  }

  public DmpHydroApiRequestsMeasurementRequest measurementDateTime(OffsetDateTime measurementDateTime) {
    this.measurementDateTime = measurementDateTime;
    return this;
  }

   /**
   * Measurement time. Must be defined without second component as an UTC timestamp in the RFC 3339 date+time format. For example &#x27;2023-09-21T14:34Z&#x27;.
   * @return measurementDateTime
  **/
  @Schema(required = true, description = "Measurement time. Must be defined without second component as an UTC timestamp in the RFC 3339 date+time format. For example '2023-09-21T14:34Z'.")
  public OffsetDateTime getMeasurementDateTime() {
    return measurementDateTime;
  }

  public void setMeasurementDateTime(OffsetDateTime measurementDateTime) {
    this.measurementDateTime = measurementDateTime;
  }

  public DmpHydroApiRequestsMeasurementRequest result(Double result) {
    this.result = result;
    return this;
  }

   /**
   * Result
   * @return result
  **/
  @Schema(required = true, description = "Result")
  public Double getResult() {
    return result;
  }

  public void setResult(Double result) {
    this.result = result;
  }

  public DmpHydroApiRequestsMeasurementRequest reasonCodeSc(Integer reasonCodeSc) {
    this.reasonCodeSc = reasonCodeSc;
    return this;
  }

   /**
   * Reason code stancode, a subset of stancode list 1188
   * @return reasonCodeSc
  **/
  @Schema(description = "Reason code stancode, a subset of stancode list 1188")
  public Integer getReasonCodeSc() {
    return reasonCodeSc;
  }

  public void setReasonCodeSc(Integer reasonCodeSc) {
    this.reasonCodeSc = reasonCodeSc;
  }

  public DmpHydroApiRequestsMeasurementRequest refPointText(String refPointText) {
    this.refPointText = refPointText;
    return this;
  }

   /**
   * Reference point text, required for examination type sc 30, unavailable for other types
   * @return refPointText
  **/
  @Schema(description = "Reference point text, required for examination type sc 30, unavailable for other types")
  public String getRefPointText() {
    return refPointText;
  }

  public void setRefPointText(String refPointText) {
    this.refPointText = refPointText;
  }

  public DmpHydroApiRequestsMeasurementRequest distToFixPointM(Double distToFixPointM) {
    this.distToFixPointM = distToFixPointM;
    return this;
  }

   /**
   * Distance to fix point (meter), required for examination type sc 30, unavailable for other types
   * @return distToFixPointM
  **/
  @Schema(description = "Distance to fix point (meter), required for examination type sc 30, unavailable for other types")
  public Double getDistToFixPointM() {
    return distToFixPointM;
  }

  public void setDistToFixPointM(Double distToFixPointM) {
    this.distToFixPointM = distToFixPointM;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DmpHydroApiRequestsMeasurementRequest dmpHydroApiRequestsMeasurementRequest = (DmpHydroApiRequestsMeasurementRequest) o;
    return Objects.equals(this.formulaId, dmpHydroApiRequestsMeasurementRequest.formulaId) &&
        Objects.equals(this.measurementDateTime, dmpHydroApiRequestsMeasurementRequest.measurementDateTime) &&
        Objects.equals(this.result, dmpHydroApiRequestsMeasurementRequest.result) &&
        Objects.equals(this.reasonCodeSc, dmpHydroApiRequestsMeasurementRequest.reasonCodeSc) &&
        Objects.equals(this.refPointText, dmpHydroApiRequestsMeasurementRequest.refPointText) &&
        Objects.equals(this.distToFixPointM, dmpHydroApiRequestsMeasurementRequest.distToFixPointM);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formulaId, measurementDateTime, result, reasonCodeSc, refPointText, distToFixPointM);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DmpHydroApiRequestsMeasurementRequest {\n");
    
    sb.append("    formulaId: ").append(toIndentedString(formulaId)).append("\n");
    sb.append("    measurementDateTime: ").append(toIndentedString(measurementDateTime)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    reasonCodeSc: ").append(toIndentedString(reasonCodeSc)).append("\n");
    sb.append("    refPointText: ").append(toIndentedString(refPointText)).append("\n");
    sb.append("    distToFixPointM: ").append(toIndentedString(distToFixPointM)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
