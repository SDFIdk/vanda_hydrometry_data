/*
 * Dmp.Hydro.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dk.miljoeportal.vandah.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Date;
/**
 * DmpHydroApiRequestsResultRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-18T14:15:50.310248991+02:00[Europe/Copenhagen]")

public class DmpHydroApiRequestsResultRequest {
  @JsonProperty("measurementDateTime")
  private Date measurementDateTime = null;

  @JsonProperty("result")
  private Double result = null;

  @JsonProperty("reasonCodeSc")
  private Integer reasonCodeSc = null;

  public DmpHydroApiRequestsResultRequest measurementDateTime(Date measurementDateTime) {
    this.measurementDateTime = measurementDateTime;
    return this;
  }

   /**
   * Measurement time.Must be defined without second component as an UTC timestamp in the RFC 3339 date+time format. For example &#x27;2023-09-21T14:34Z&#x27;.
   * @return measurementDateTime
  **/
  @Schema(required = true, description = "Measurement time.Must be defined without second component as an UTC timestamp in the RFC 3339 date+time format. For example '2023-09-21T14:34Z'.")
  public Date getMeasurementDateTime() {
    return measurementDateTime;
  }

  public void setMeasurementDateTime(Date measurementDateTime) {
    this.measurementDateTime = measurementDateTime;
  }

  public DmpHydroApiRequestsResultRequest result(Double result) {
    this.result = result;
    return this;
  }

   /**
   * Result
   * @return result
  **/
  @Schema(required = true, description = "Result")
  public Double getResult() {
    return result;
  }

  public void setResult(Double result) {
    this.result = result;
  }

  public DmpHydroApiRequestsResultRequest reasonCodeSc(Integer reasonCodeSc) {
    this.reasonCodeSc = reasonCodeSc;
    return this;
  }

   /**
   * Reason code stancode, a subset of stancode list 1188
   * @return reasonCodeSc
  **/
  @Schema(description = "Reason code stancode, a subset of stancode list 1188")
  public Integer getReasonCodeSc() {
    return reasonCodeSc;
  }

  public void setReasonCodeSc(Integer reasonCodeSc) {
    this.reasonCodeSc = reasonCodeSc;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DmpHydroApiRequestsResultRequest dmpHydroApiRequestsResultRequest = (DmpHydroApiRequestsResultRequest) o;
    return Objects.equals(this.measurementDateTime, dmpHydroApiRequestsResultRequest.measurementDateTime) &&
        Objects.equals(this.result, dmpHydroApiRequestsResultRequest.result) &&
        Objects.equals(this.reasonCodeSc, dmpHydroApiRequestsResultRequest.reasonCodeSc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(measurementDateTime, result, reasonCodeSc);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DmpHydroApiRequestsResultRequest {\n");
    
    sb.append("    measurementDateTime: ").append(toIndentedString(measurementDateTime)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    reasonCodeSc: ").append(toIndentedString(reasonCodeSc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
