/*
 * Dmp.Hydro.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dk.miljoeportal.vandah.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Date;
/**
 * DmpHydroApiResponsesWaterLevelResultStreamlineResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-09-18T14:15:50.310248991+02:00[Europe/Copenhagen]")

public class DmpHydroApiResponsesWaterLevelResultStreamlineResponse {
  @JsonProperty("measurementPointNumber")
  private Integer measurementPointNumber = null;

  @JsonProperty("parameterSc")
  private Integer parameterSc = null;

  @JsonProperty("parameter")
  private String parameter = null;

  @JsonProperty("examinationTypeSc")
  private Integer examinationTypeSc = null;

  @JsonProperty("examinationType")
  private String examinationType = null;

  @JsonProperty("measurementDateTime")
  private Date measurementDateTime = null;

  @JsonProperty("result")
  private Double result = null;

  @JsonProperty("resultElevationCorrected")
  private Double resultElevationCorrected = null;

  @JsonProperty("unitSc")
  private Integer unitSc = null;

  @JsonProperty("unit")
  private String unit = null;

  public DmpHydroApiResponsesWaterLevelResultStreamlineResponse measurementPointNumber(Integer measurementPointNumber) {
    this.measurementPointNumber = measurementPointNumber;
    return this;
  }

   /**
   * Measurement point number
   * @return measurementPointNumber
  **/
  @Schema(description = "Measurement point number")
  public Integer getMeasurementPointNumber() {
    return measurementPointNumber;
  }

  public void setMeasurementPointNumber(Integer measurementPointNumber) {
    this.measurementPointNumber = measurementPointNumber;
  }

  public DmpHydroApiResponsesWaterLevelResultStreamlineResponse parameterSc(Integer parameterSc) {
    this.parameterSc = parameterSc;
    return this;
  }

   /**
   * Parameter stancode
   * @return parameterSc
  **/
  @Schema(description = "Parameter stancode")
  public Integer getParameterSc() {
    return parameterSc;
  }

  public void setParameterSc(Integer parameterSc) {
    this.parameterSc = parameterSc;
  }

  public DmpHydroApiResponsesWaterLevelResultStreamlineResponse parameter(String parameter) {
    this.parameter = parameter;
    return this;
  }

   /**
   * Parameter name
   * @return parameter
  **/
  @Schema(description = "Parameter name")
  public String getParameter() {
    return parameter;
  }

  public void setParameter(String parameter) {
    this.parameter = parameter;
  }

  public DmpHydroApiResponsesWaterLevelResultStreamlineResponse examinationTypeSc(Integer examinationTypeSc) {
    this.examinationTypeSc = examinationTypeSc;
    return this;
  }

   /**
   * Examination type stancode
   * @return examinationTypeSc
  **/
  @Schema(description = "Examination type stancode")
  public Integer getExaminationTypeSc() {
    return examinationTypeSc;
  }

  public void setExaminationTypeSc(Integer examinationTypeSc) {
    this.examinationTypeSc = examinationTypeSc;
  }

  public DmpHydroApiResponsesWaterLevelResultStreamlineResponse examinationType(String examinationType) {
    this.examinationType = examinationType;
    return this;
  }

   /**
   * Examination type name
   * @return examinationType
  **/
  @Schema(description = "Examination type name")
  public String getExaminationType() {
    return examinationType;
  }

  public void setExaminationType(String examinationType) {
    this.examinationType = examinationType;
  }

  public DmpHydroApiResponsesWaterLevelResultStreamlineResponse measurementDateTime(Date measurementDateTime) {
    this.measurementDateTime = measurementDateTime;
    return this;
  }

   /**
   * Measurement date time. Must be defined without second component as an UTC timestamp in the RFC 3339 date+time format. For example &#x27;2023-09-21T14:34Z&#x27;.
   * @return measurementDateTime
  **/
  @Schema(description = "Measurement date time. Must be defined without second component as an UTC timestamp in the RFC 3339 date+time format. For example '2023-09-21T14:34Z'.")
  public Date getMeasurementDateTime() {
    return measurementDateTime;
  }

  public void setMeasurementDateTime(Date measurementDateTime) {
    this.measurementDateTime = measurementDateTime;
  }

  public DmpHydroApiResponsesWaterLevelResultStreamlineResponse result(Double result) {
    this.result = result;
    return this;
  }

   /**
   * Measurement result at the time (CreateTimestamp property)
   * @return result
  **/
  @Schema(description = "Measurement result at the time (CreateTimestamp property)")
  public Double getResult() {
    return result;
  }

  public void setResult(Double result) {
    this.result = result;
  }

  public DmpHydroApiResponsesWaterLevelResultStreamlineResponse resultElevationCorrected(Double resultElevationCorrected) {
    this.resultElevationCorrected = resultElevationCorrected;
    return this;
  }

   /**
   * Elevation corrected result. Only available for Water Level examination
   * @return resultElevationCorrected
  **/
  @Schema(description = "Elevation corrected result. Only available for Water Level examination")
  public Double getResultElevationCorrected() {
    return resultElevationCorrected;
  }

  public void setResultElevationCorrected(Double resultElevationCorrected) {
    this.resultElevationCorrected = resultElevationCorrected;
  }

  public DmpHydroApiResponsesWaterLevelResultStreamlineResponse unitSc(Integer unitSc) {
    this.unitSc = unitSc;
    return this;
  }

   /**
   * Unit stancode
   * @return unitSc
  **/
  @Schema(description = "Unit stancode")
  public Integer getUnitSc() {
    return unitSc;
  }

  public void setUnitSc(Integer unitSc) {
    this.unitSc = unitSc;
  }

  public DmpHydroApiResponsesWaterLevelResultStreamlineResponse unit(String unit) {
    this.unit = unit;
    return this;
  }

   /**
   * Unit name
   * @return unit
  **/
  @Schema(description = "Unit name")
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DmpHydroApiResponsesWaterLevelResultStreamlineResponse dmpHydroApiResponsesWaterLevelResultStreamlineResponse = (DmpHydroApiResponsesWaterLevelResultStreamlineResponse) o;
    return Objects.equals(this.measurementPointNumber, dmpHydroApiResponsesWaterLevelResultStreamlineResponse.measurementPointNumber) &&
        Objects.equals(this.parameterSc, dmpHydroApiResponsesWaterLevelResultStreamlineResponse.parameterSc) &&
        Objects.equals(this.parameter, dmpHydroApiResponsesWaterLevelResultStreamlineResponse.parameter) &&
        Objects.equals(this.examinationTypeSc, dmpHydroApiResponsesWaterLevelResultStreamlineResponse.examinationTypeSc) &&
        Objects.equals(this.examinationType, dmpHydroApiResponsesWaterLevelResultStreamlineResponse.examinationType) &&
        Objects.equals(this.measurementDateTime, dmpHydroApiResponsesWaterLevelResultStreamlineResponse.measurementDateTime) &&
        Objects.equals(this.result, dmpHydroApiResponsesWaterLevelResultStreamlineResponse.result) &&
        Objects.equals(this.resultElevationCorrected, dmpHydroApiResponsesWaterLevelResultStreamlineResponse.resultElevationCorrected) &&
        Objects.equals(this.unitSc, dmpHydroApiResponsesWaterLevelResultStreamlineResponse.unitSc) &&
        Objects.equals(this.unit, dmpHydroApiResponsesWaterLevelResultStreamlineResponse.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(measurementPointNumber, parameterSc, parameter, examinationTypeSc, examinationType, measurementDateTime, result, resultElevationCorrected, unitSc, unit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DmpHydroApiResponsesWaterLevelResultStreamlineResponse {\n");
    
    sb.append("    measurementPointNumber: ").append(toIndentedString(measurementPointNumber)).append("\n");
    sb.append("    parameterSc: ").append(toIndentedString(parameterSc)).append("\n");
    sb.append("    parameter: ").append(toIndentedString(parameter)).append("\n");
    sb.append("    examinationTypeSc: ").append(toIndentedString(examinationTypeSc)).append("\n");
    sb.append("    examinationType: ").append(toIndentedString(examinationType)).append("\n");
    sb.append("    measurementDateTime: ").append(toIndentedString(measurementDateTime)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    resultElevationCorrected: ").append(toIndentedString(resultElevationCorrected)).append("\n");
    sb.append("    unitSc: ").append(toIndentedString(unitSc)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
